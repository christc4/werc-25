Command substitution

Back quotes aren't used to prevent interpretation of special characters it *instead* has a special use - _command substitution_. The string between backquotes is executed by the shell, and the results *replace* the backquoted string:

	$ echo 'The current directory is `pwd`'

The current directory is `pwd`

	$ echo 'The current directory is \`pwd\`'

The current directory is \`pwd\`

	$ echo "The current directory is `pwd`"

The current directory is /home/avsbq

	$ echo "The current directory is \`pwd\`"

The current directory is `pwd`

This feature hail from earlier shells (C and Bourne). This has a major problem - command substitution cannot be nested. A new mechanism was created for command substitution, which replaces the back quotes:

`$(command)`

Using the above, the previous examples would be:

	$ echo 'The current directory is $(pwd)'

The current directory is $(pwd)

	$ echo "The current directory is $(pwd)"

The current directory is /home/avsbq

	$ echo "The current directory is \$(pwd)"

The current directory is $(pwd)

An example command substitution of adding one to the current year.

	YEAR="$(date +%Y)"

	YEAR="$(expr $YEAR + 1)"

	echo "next year is $YEAR"

Alternatively we can use nest expressions:
 
	echo "next year is $(expr $(date +%Y) + 1)"
